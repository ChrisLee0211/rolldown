[
  "rollup@function@add-watch-file-generate: throws when adding watch files during generate",
  "rollup@function@adds-json-hint-for-missing-export-if-is-json-file: should provide json hint when importing a no export json file",
  "rollup@function@adds-timings-to-bundle-when-codesplitting: Adds timing information to bundle when bundling with perf=true",
  "rollup@function@adds-timings-to-bundle: Adds timing information to bundle when bundling with perf=true",
  "rollup@function@allow-reserved: allow reserved identifiers via custom acorn options",
  "rollup@function@already-deshadowed-import: handle already module import names correctly if they are have already been deshadowed",
  "rollup@function@amd-auto-id-id: throws when using both the amd.autoId and the amd.id option",
  "rollup@function@amd-base-path-id: throws when using both the amd.basePath and the amd.id option",
  "rollup@function@amd-base-path: throws when using only amd.basePath option",
  "rollup@function@assign-namespace-to-var: allows a namespace to be assigned to a variable",
  "rollup@function@associate-arrow-function-parameter-mutations: Associates arrow function parameters with their call arguments with regard to mutations",
  "rollup@function@associate-arrow-function-return-values: Associates function return values with regard to mutations",
  "rollup@function@associate-es5-constructor-parameter-mutations: Associates ES5 constructor parameters with their call arguments",
  "rollup@function@associate-es6-constructor-parameter-mutations: Associates ES5 constructor parameters with their call arguments",
  "rollup@function@associate-function-parameter-mutations-2: Associates function parameters with their call arguments with regard to mutations",
  "rollup@function@associate-function-parameter-mutations: Associates function parameters with their call arguments with regard to mutations",
  "rollup@function@associate-function-return-values-2: Associates function return values with regard to calls",
  "rollup@function@associate-function-return-values-3: Associates function return values of returned functions",
  "rollup@function@associate-function-return-values-4: Handles empty return statements (#1702)",
  "rollup@function@associate-function-return-values-5: Associates value mutations across return values",
  "rollup@function@associate-function-return-values-across-other-expressions: Associates function return values with regard to mutations",
  "rollup@function@associate-function-return-values: Associates function return values with regard to mutations",
  "rollup@function@associate-getter-return-values-2: Associates getter return values with regard to calls",
  "rollup@function@associate-getter-return-values: Associates getter return values with regard to mutations",
  "rollup@function@associate-method-parameter-mutations-2: Associates method parameters with their call arguments with regard to mutations",
  "rollup@function@associate-method-parameter-mutations: Associates method parameters with their call arguments with regard to mutations",
  "rollup@function@associate-object-expression-parameter-mutations: Associates object expression member parameters with their call arguments",
  "rollup@function@associate-object-expression-return-values: Associates object expression member parameters with their call arguments",
  "rollup@function@associate-parameter-mutations-across-other-expressions: Associates parameters with their call arguments across other expressions",
  "rollup@function@associate-setter-parameters: Associates getter return values with regard to mutations",
  "rollup@function@avoid-variable-be-empty: avoid variable from empty module name be empty",
  "rollup@function@banner-and-footer: adds a banner/footer",
  "rollup@function@bundle-facade-order: respects the order of entry points when there are additional facades for chunks",
  "rollup@function@call-marked-pure-with-plugin-parse-ast: external function calls marked with pure comment do not have effects and should be removed even if parsed by PluginContext.parse method",
  "rollup@function@call-marked-pure: external function calls marked with pure comment do not have effects",
  "rollup@function@can-import-self-treeshake: direct self import",
  "rollup@function@can-import-self: a module importing its own bindings",
  "rollup@function@cannot-call-external-namespace: warns if code calls an external namespace",
  "rollup@function@cannot-call-internal-namespace: warns if code calls an internal namespace",
  "rollup@function@cannot-resolve-sourcemap-warning: handles when a sourcemap cannot be resolved in a warning",
  "rollup@function@catch-dynamic-import-failure: allows catching failed dynamic imports",
  "rollup@function@check-resolve-for-entry: checks that entry is resolved",
  "rollup@function@chunking-duplicate-reexport: handles duplicate reexports when using dynamic imports",
  "rollup@function@circular-missed-reexports-2: handles circular reexports",
  "rollup@function@circular-missed-reexports: handles circular reexports",
  "rollup@function@circular-preserve-modules: correctly handles circular dependencies whe preserving modules",
  "rollup@function@circular-reexport: throws proper error for circular reexports",
  "rollup@function@class-name-conflict-2: does not shadow variables when preserving class names",
  "rollup@function@class-name-conflict-3: does not shadow variables when preserving class names",
  "rollup@function@class-name-conflict-4: does not shadow variables when preserving class names",
  "rollup@function@class-name-conflict: preserves class names even if the class is renamed",
  "rollup@function@compact: compact output with compact: true",
  "rollup@function@conflicting-reexports@named-import-external: warns when a conflicting binding is imported via a named import from external namespaces",
  "rollup@function@conflicting-reexports@named-import: throws when a conflicting binding is imported via a named import",
  "rollup@function@conflicting-reexports@namespace-import: warns when a conflicting binding is imported via a namespace import",
  "rollup@function@context-resolve-skipself: allows a plugin to skip its own resolveId hook when using this.resolve",
  "rollup@function@context-resolve: returns the correct results for the context resolve helper",
  "rollup@function@custom-external-resolver-async: uses a custom external path resolver (asynchronous)",
  "rollup@function@custom-external-resolver-sync: uses a custom external path resolver (synchronous)",
  "rollup@function@custom-loaders: uses custom loaders, falling back to default",
  "rollup@function@custom-module-options: supports adding custom options to modules",
  "rollup@function@custom-path-resolver-async: uses a custom path resolver (asynchronous)",
  "rollup@function@custom-path-resolver-on-entry: applies custom resolver to entry point",
  "rollup@function@custom-path-resolver-plural-b: resolver error is not caught",
  "rollup@function@custom-path-resolver-plural: uses custom path resolvers (plural)",
  "rollup@function@custom-path-resolver-sync: uses a custom path resolver (synchronous)",
  "rollup@function@custom-resolve-options: supports custom resolve options",
  "rollup@function@cycles-default-anonymous-function-hoisted: Anonymous function declarations are hoisted",
  "rollup@function@cycles-defaults: cycles work with default exports",
  "rollup@function@cycles-export-star: does not stack overflow on `export * from X` cycles",
  "rollup@function@cycles-immediate: handles cycles where imports are immediately used",
  "rollup@function@cycles-pathological-2: resolves even more pathological cyclical dependencies gracefully",
  "rollup@function@cycles-stack-overflow: does not stack overflow on crazy cyclical dependencies",
  "rollup@function@deconflict-synthetic-named-export-cross-chunk: deconflicts synthetic named exports across chunks",
  "rollup@function@deconflict-synthetic-named-export: deconflicts synthetic named exports",
  "rollup@function@deconflicts-exports-3: renames variables named \"module\" if necessary",
  "rollup@function@deconflicts-interop: deconflicts the interop function",
  "rollup@function@default-export-before-declaration: handles default exports before a variable is declared",
  "rollup@function@default-export-is-not-bound-b: does not move default export statement above earlier statements",
  "rollup@function@default-export-is-not-bound: does not bind default exports",
  "rollup@function@default-export-with-null-prototype: default exports of objects with null prototypes are supported",
  "rollup@function@default-exported-global: Tracks updates of default exported globals",
  "rollup@function@default-not-reexported: default export is not re-exported with export *",
  "rollup@function@default-on-warn: provides a default handler for warnings to onwarn that handles strings and objects",
  "rollup@function@deprecated@compact: compact output with compact: true",
  "rollup@function@deprecated@dynamic-import-duplicates: Dynamic import inlining",
  "rollup@function@deprecated@dynamic-import-inlining: Dynamic import inlining",
  "rollup@function@deprecated@dynamic-import-name: allows specifying a custom importer function",
  "rollup@function@deprecated@inline-dynamic-imports-bundle: ignores non-bundled modules when inlining dynamic imports",
  "rollup@function@deprecated@inline-imports-with-manual: Manual chunks are not supported when inlining dynamic imports",
  "rollup@function@deprecated@inline-imports-with-multiple-array: Having multiple inputs in an array is not supported when inlining dynamic imports",
  "rollup@function@deprecated@inline-imports-with-multiple-object: Having multiple inputs in an object is not supported when inlining dynamic imports",
  "rollup@function@deprecated@manual-chunks-conflict: Throws for conflicts between manual chunks",
  "rollup@function@deprecated@manual-chunks-preserve-modules: Assigning manual chunks fails when preserving modules",
  "rollup@function@deprecated@max-parallel-file-reads@infinity: maxParallelFileReads set to infinity",
  "rollup@function@deprecated@max-parallel-file-reads@set: maxParallelFileReads set to 3",
  "rollup@function@deprecated@max-parallel-file-reads@with-plugin: maxParallelFileReads with plugin",
  "rollup@function@deprecated@name-conflict-symbol: avoids name conflicts with local variables named Symbol",
  "rollup@function@deprecated@namespace-tostring@dynamic-import-default-mode: adds Symbol.toStringTag property to dynamic imports of entry chunks with default export mode",
  "rollup@function@deprecated@namespace-tostring@dynamic-import: adds Symbol.toStringTag property to dynamic imports",
  "rollup@function@deprecated@namespace-tostring@entry-default: does not add Symbol.toStringTag property to entry chunks with default export mode",
  "rollup@function@deprecated@namespace-tostring@entry-named: adds Symbol.toStringTag property to entry chunks with named exports",
  "rollup@function@deprecated@namespace-tostring@external-namespaces: adds Symbol.toStringTag property to external namespaces",
  "rollup@function@deprecated@namespace-tostring@inlined-namespace: adds Symbol.toStringTag property to inlined namespaces",
  "rollup@function@deprecated@namespace-tostring@interop-property-descriptor: generated interop namespaces should have correct Symbol.toStringTag",
  "rollup@function@deprecated@namespace-tostring@property-descriptor: namespace export should have @@toStringTag with correct property descriptors #4336",
  "rollup@function@deprecated@nested-inlined-dynamic-import-1: deconflicts variables when nested dynamic imports are inlined via inlineDynamicImports",
  "rollup@function@deprecated@plugin-module-ids: provides all module ids on the plugin context",
  "rollup@function@deprecated@preserveModules@inline-dynamic-imports: Inlining dynamic imports is not supported when preserving modules",
  "rollup@function@deprecated@preserveModules@invalid-default-export-mode: throws when using default export mode with named exports",
  "rollup@function@deprecated@preserveModules@invalid-no-preserve-entry-signatures: throws when setting preserveEntrySignatures to false",
  "rollup@function@deprecated@preserveModules@invalid-none-export-mode: throws when using none export mode with named exports",
  "rollup@function@deprecated@preserveModules@manual-chunks: Assigning manual chunks fails when preserving modules",
  "rollup@function@deprecated@preserveModules@mixed-exports: warns for mixed exports in all chunks when preserving modules",
  "rollup@function@deprecated@preserveModules@virtual-modules-conflict: Generates actual files for virtual modules when preserving modules",
  "rollup@function@deprecated@preserveModules@virtual-modules: Generates actual files for virtual modules when preserving modules",
  "rollup@function@deprecated@reexport-ns: external namespace reexport",
  "rollup@function@deprecated@resolve-id-external: does not include modules without used exports if moduleSideEffect is false",
  "rollup@function@deprecated@resolve-id: does not include modules without used exports if moduleSideEffect is false",
  "rollup@function@deprecations@dynamicImportFunction: marks the \"output.dynamicImportFunction\" option as deprecated",
  "rollup@function@deprecations@hasModuleSideEffects: warns that accessing \"ModuleInfo.hasModuleSideEffects\" is deprecated",
  "rollup@function@deprecations@inlineDynamicImports: marks the \"inlineDynamicImports\" input option as deprecated",
  "rollup@function@deprecations@manualChunks: marks the \"manualChunks\" input option as deprecated",
  "rollup@function@deprecations@maxParallelFileReads: marks the \"maxParallelFileReads\" option as deprecated",
  "rollup@function@deprecations@namespaceToStringTag: marks the \"output.namespaceToStringTag\" option as deprecated",
  "rollup@function@deprecations@plugin-module-ids: provides all module ids on the plugin context",
  "rollup@function@deprecations@prefer-const: marks the \"output.preferConst\" option as deprecated",
  "rollup@function@deprecations@preserveModules: marks the \"preserveModules\" input option as deprecated",
  "rollup@function@does-not-hang-on-missing-module: does not hang on missing module (#53)",
  "rollup@function@does-not-mangle-entry-point: does not mangle input",
  "rollup@function@double-default-export: throws on double default exports",
  "rollup@function@double-named-export: throws on duplicate named exports",
  "rollup@function@double-named-reexport: throws on duplicate named exports",
  "rollup@function@double-namespace-reexport: handles chained namespace reexports from externals",
  "rollup@function@duplicate-import-fails: disallows duplicate imports",
  "rollup@function@duplicate-import-specifier-fails: disallows duplicate import specifiers",
  "rollup@function@dynamic-import-default-mode-facade: handles dynamic imports from facades using default export mode",
  "rollup@function@dynamic-import-expression: Dynamic import expression replacement",
  "rollup@function@dynamic-import-not-found: warns if a dynamic import is not found",
  "rollup@function@dynamic-import-only-default: correctly imports dynamic namespaces with only a default export from entry- and non-entry-point chunks",
  "rollup@function@dynamic-import-relative-not-found: throws if a dynamic relative import is not found",
  "rollup@function@emit-file@asset-source-invalid2: throws when setting an empty asset source",
  "rollup@function@emit-file@asset-source-invalid3: throws when setting an empty asset source",
  "rollup@function@emit-file@asset-source-invalid4: throws when setting an empty asset source",
  "rollup@function@emit-file@asset-source-invalid: throws when setting an empty asset source",
  "rollup@function@emit-file@asset-source-missing2: throws when not setting the asset source",
  "rollup@function@emit-file@asset-source-missing3: throws when accessing the file name before the asset source is set",
  "rollup@function@emit-file@asset-source-missing4: throws when accessing the file name before the asset source is set",
  "rollup@function@emit-file@asset-source-missing5: throws when not setting the asset source and accessing the asset URL",
  "rollup@function@emit-file@asset-source-missing: throws when not setting the asset source",
  "rollup@function@emit-file@chunk-filename-not-available-buildEnd: Throws when accessing the filename before it has been generated in buildEnd",
  "rollup@function@emit-file@chunk-filename-not-available-renderStart: Throws when accessing the filename before it has been generated in renderStart",
  "rollup@function@emit-file@chunk-filename-not-available: Throws when accessing the filename before it has been generated",
  "rollup@function@emit-file@chunk-not-found: Throws if an emitted entry chunk cannot be resolved",
  "rollup@function@emit-file@emit-from-output-options: throws when trying to emit files from the outputOptions hook",
  "rollup@function@emit-file@emit-same-file: warns if multiple files with the same name are emitted",
  "rollup@function@emit-file@file-references-in-bundle: lists referenced files in the bundle",
  "rollup@function@emit-file@invalid-asset-name3: throws for invalid asset names with absolute path on Windows OS",
  "rollup@function@emit-file@invalid-asset-name: throws for invalid asset names",
  "rollup@function@emit-file@invalid-chunk-id: throws for invalid chunk ids",
  "rollup@function@emit-file@invalid-file-type: throws for invalid file types",
  "rollup@function@emit-file@invalid-reference-id: throws for invalid reference ids",
  "rollup@function@emit-file@invalid-set-asset-source-id: throws for invalid asset ids",
  "rollup@function@emit-file@modules-loaded: Throws when adding a chunk after the modules have finished loading",
  "rollup@function@emit-file@no-input: It is not necessary to provide an input if a dynamic entry is emitted",
  "rollup@function@emit-file@set-asset-source-chunk: throws when trying to set the asset source of a chunk",
  "rollup@function@emit-file@set-asset-source-transform: throws when setting the asset source in the transform hook",
  "rollup@function@emit-file@set-asset-source-twice2: throws when setting the asset source twice",
  "rollup@function@emit-file@set-asset-source-twice: throws when setting the asset source twice",
  "rollup@function@emit-file@set-source-in-output-options: throws when trying to set file sources in  the outputOptions hook",
  "rollup@function@empty-string-as-module-name: allows using empty string as a valid module name",
  "rollup@function@enforce-plugin-order: allows to enforce plugin hook order",
  "rollup@function@enforce-sequential-plugin-order: allows to enforce sequential plugin hook order for parallel plugin hooks",
  "rollup@function@error-after-transform-should-throw-correct-location: error after transform should throw with correct location of file",
  "rollup@function@error-missing-umd-name: throws an error if no name is provided for a UMD bundle",
  "rollup@function@error-parse-json: throws with an extended error message when failing to parse a file with \".json\" extension",
  "rollup@function@error-parse-unknown-extension: throws with an extended error message when failing to parse a file without .(m)js extension",
  "rollup@function@export-default-expression: exports a default value as module.exports",
  "rollup@function@export-default-from-external: ensures external modules have correct names",
  "rollup@function@export-default-named-function: exports a default named function",
  "rollup@function@export-default-no-space: handles default exports with no space before declaration",
  "rollup@function@export-not-at-top-level-fails: disallows non-top-level exports",
  "rollup@function@export-type-mismatch-b: export type must be auto, default, named or none",
  "rollup@function@export-type-mismatch-c: cannot have named exports if explicit export type is default",
  "rollup@function@export-type-mismatch: cannot have named exports if explicit export type is default",
  "rollup@function@external-alias: includes an external module included dynamically by an alias",
  "rollup@function@external-conflict: external paths from custom resolver remain external (#633)",
  "rollup@function@external-directory-import: handles using ../ as external import (#4349)",
  "rollup@function@external-dynamic-import-live-binding-compact: supports external dynamic imports with live bindings in compact mode",
  "rollup@function@external-dynamic-import-live-binding: supports external dynamic imports with live bindings",
  "rollup@function@external-entry-point-object: throws for entry points that are resolved as an external object by plugins",
  "rollup@function@external-entry-point: throws for entry points that are resolved as false by plugins",
  "rollup@function@external-ignore-reserved-null-marker: external function ignores \\0 started ids",
  "rollup@function@external-normalization: external paths from custom resolver remain external (#633)",
  "rollup@function@external-resolve-false: includes an external module with a false resolve return",
  "rollup@function@external-resolved: passes both unresolved and resolved ids to the external option",
  "rollup@function@externally-reassigned-default-exports: calls to externally reassigned methods of default exports must be retained",
  "rollup@function@fallback-on-warn: logs as a fallback if no onwarn handler is provided",
  "rollup@function@file-and-dir: throws when using both the file and the dir option",
  "rollup@function@function-directive-not-first: should delete use asm from function body if it is not the first expression",
  "rollup@function@function-use-strict-directive-removed: should delete use strict from function body",
  "rollup@function@handle-missing-export-source: does not fail if a pre-generated AST is omitting the source property of an unused named export (#3210)",
  "rollup@function@has-default-export: reports if a module has a default export",
  "rollup@function@has-modules-array: user-facing bundle has modules array",
  "rollup@function@hashing@length-at-non-hash: throws when configuring a length for placeholder other than \"hash\"",
  "rollup@function@hashing@maximum-hash-size: throws when the maximum hash size is exceeded",
  "rollup@function@hashing@minimum-hash-size: throws when the maximum hash size is exceeded",
  "rollup@function@iife-code-splitting: throws when generating multiple chunks for an IIFE build",
  "rollup@function@iife-comments: does not wrongly append comments",
  "rollup@function@implicit-dependencies@dependant-dynamic-import-no-effects: throws when a module that is loaded before an emitted chunk is fully tree-shaken",
  "rollup@function@implicit-dependencies@dependant-dynamic-import-not-included: throws when a module that is loaded before an emitted chunk is only linked to the module graph via a tree-shaken dynamic import",
  "rollup@function@implicit-dependencies@dependant-not-part-of-graph: throws when a module that is loaded before an emitted chunk is not part of the module graph",
  "rollup@function@implicit-dependencies@external-dependant: throws when a module that is loaded before an emitted chunk does not exist",
  "rollup@function@implicit-dependencies@missing-dependant: throws when a module that is loaded before an emitted chunk is external",
  "rollup@function@import-assertions@warn-assertion-conflicts: warns for conflicting import assertions",
  "rollup@function@import-meta-url: resolves import.meta.url",
  "rollup@function@import-not-at-top-level-fails: disallows non-top-level imports",
  "rollup@function@import-of-unexported-fails: marking an imported, but unexported, identifier should throw",
  "rollup@function@inline-dynamic-no-treeshake: handles inlining dynamic imports when treeshaking is disabled for modules (#4098)",
  "rollup@function@inline-imports-with-manual: Manual chunks are not supported when inlining dynamic imports",
  "rollup@function@inline-imports-with-multiple-array: Having multiple inputs in an array is not supported when inlining dynamic imports",
  "rollup@function@inline-imports-with-multiple-object: Having multiple inputs in an object is not supported when inlining dynamic imports",
  "rollup@function@inlined-dynamic-namespace-compact: properly resolves inlined dynamic namespaces in compact mode",
  "rollup@function@input-name-validation2: throws for relative paths as input names",
  "rollup@function@input-name-validation3: throws for relative paths as input names",
  "rollup@function@input-name-validation: throws for absolute paths as input names",
  "rollup@function@internal-reexports-from-external: supports namespaces with external star reexports",
  "rollup@function@interop-auto-live-bindings: handles interop \"auto\" with live-bindings support",
  "rollup@function@interop-auto-no-live-bindings: handles interop \"auto\" without live-bindings support",
  "rollup@function@interop-default-only-named-import: throws when using a named import with interop \"defaultOnly\"",
  "rollup@function@interop-default-only-named-namespace-reexport: allows reexporting a namespace as a name when interop is \"defaultOnly\"",
  "rollup@function@interop-default-only-named-reexport: throws when reexporting a namespace with interop \"defaultOnly\"",
  "rollup@function@interop-default-only-namespace-import: allows importing a namespace when interop is \"defaultOnly\"",
  "rollup@function@interop-default-only-namespace-reexport: warns when reexporting a namespace with interop \"defaultOnly\"",
  "rollup@function@interop-default-only: handles interop \"defaultOnly\"",
  "rollup@function@interop-default: handles interop \"default\" with live-bindings support",
  "rollup@function@interop-esmodule: handles interop \"esModule\" with live-bindings support",
  "rollup@function@invalid-addon-hook: throws when providing a non-string value for an addon hook",
  "rollup@function@invalid-default-export-mode: throw for invalid default export mode",
  "rollup@function@invalid-interop: throws for invalid interop values",
  "rollup@function@invalid-pattern-replacement: throws for invalid placeholders in patterns",
  "rollup@function@invalid-pattern: throws for invalid patterns",
  "rollup@function@invalid-property-assignments: includes invalid property assignments",
  "rollup@function@invalid-property-calls: includes invalid property calls",
  "rollup@function@invalid-top-level-await: throws for invalid top-level-await format",
  "rollup@function@invalid-transform-source-function: throw descriptive error if sourcemapPathTransform-function does not return a string (#3484)",
  "rollup@function@keep-cjs-dynamic-import: keeps dynamic imports in CJS output by default",
  "rollup@function@keep-used-imports-from-pure-external-modules: imports from pure external modules that are used should not be omitted",
  "rollup@function@load-module-error@buildEnd: buildStart hooks can use this.error",
  "rollup@function@load-module-error@buildStart: buildStart hooks can use this.error",
  "rollup@function@load-module-error@generateBundle: buildStart hooks can use this.error",
  "rollup@function@load-module-error@load: throws when a module cannot be loaded",
  "rollup@function@load-module-error@renderChunk: buildStart hooks can use this.error",
  "rollup@function@load-module-error@renderStart: buildStart hooks can use this.error",
  "rollup@function@load-module-error@resolveId: buildStart hooks can use this.error",
  "rollup@function@load-module-error@transform: plugin transform hooks can use `this.error({...}, char)` (#1140)",
  "rollup@function@load-resolve-dependencies: allows to wait for dependency resolution in this.load to scan dependency trees",
  "rollup@function@load-returns-empty-string: loaders are permitted to return the empty string",
  "rollup@function@load-returns-string-or-null: throws error if load returns something wacky",
  "rollup@function@manual-chunks-conflict: Throws for conflicts between manual chunks",
  "rollup@function@max-parallel-file-operations@default: maxParallelFileOps not set",
  "rollup@function@max-parallel-file-operations@error: maxParallelFileOps: fileRead error is forwarded",
  "rollup@function@max-parallel-file-operations@infinity: maxParallelFileOps set to infinity",
  "rollup@function@max-parallel-file-operations@set: maxParallelFileOps set to 3",
  "rollup@function@max-parallel-file-operations@with-plugin: maxParallelFileOps with plugin",
  "rollup@function@member-expression-assignment-in-function: detect side effect in member expression assignment when not top level",
  "rollup@function@missing-spaces-after-simplification: handle situations where the simplification of an expression can lead to issues due to missing white-space",
  "rollup@function@mixed-external-paths: allows using the path option selectively",
  "rollup@function@modify-meta: allows to freely modify moduleInfo.meta and maintain object identity",
  "rollup@function@module-level-directive: module level directives should produce warnings",
  "rollup@function@module-parsed-imported-ids: provides full importedIds and dynamicallyImportedIds in the moduleParsed hook",
  "rollup@function@module-side-effects@array: supports setting module side effects via an array",
  "rollup@function@module-side-effects@external-false: supports setting module side effects to false for external modules",
  "rollup@function@module-side-effects@global-false: supports setting module side effects to false for all modules",
  "rollup@function@module-side-effects@invalid-option: warns for invalid options",
  "rollup@function@module-side-effects@load: handles setting moduleSideEffects in the load hook",
  "rollup@function@module-side-effects@reexport-from-external: handles reexporting external values when module side-effects are false",
  "rollup@function@module-side-effects@reexports: handles reexporting values when module side-effects are false",
  "rollup@function@module-side-effects@resolve-id-external: does not include modules without used exports if moduleSideEffect is false",
  "rollup@function@module-side-effects@resolve-id: does not include modules without used exports if moduleSideEffect is false",
  "rollup@function@module-side-effects@transform: handles setting moduleSideEffects in the transform hook",
  "rollup@function@module-side-effects@writable: ModuleInfo.moduleSideEffects should be writable during build time",
  "rollup@function@module-tree: bundle.modules includes dependencies (#903)",
  "rollup@function@name-conflict-symbol: avoids name conflicts with local variables named Symbol",
  "rollup@function@namespace-member-side-effects@assignment: checks side effects when reassigning namespace members",
  "rollup@function@namespace-member-side-effects@call: checks side effects when calling a namespace",
  "rollup@function@namespace-member-side-effects@member-call: respects side effects when namespace members are called",
  "rollup@function@namespace-member-side-effects@missing-access: respects side effects when accessing missing namespace members",
  "rollup@function@namespace-member-side-effects@unknown-access: respects side effects when accessing unknown namespace members",
  "rollup@function@namespace-missing-export: replaces missing namespace members with undefined and warns about them",
  "rollup@function@namespace-reassign-import-fails: warns for reassignments to namespace exports",
  "rollup@function@namespace-tostring@dynamic-import-default-mode: adds Symbol.toStringTag property to dynamic imports of entry chunks with default export mode",
  "rollup@function@namespace-tostring@dynamic-import: adds Symbol.toStringTag property to dynamic imports",
  "rollup@function@namespace-tostring@entry-default: does not add Symbol.toStringTag property to entry chunks with default export mode",
  "rollup@function@namespace-tostring@entry-named: adds Symbol.toStringTag property to entry chunks with named exports",
  "rollup@function@namespace-tostring@external-namespaces: adds Symbol.toStringTag property to external namespaces",
  "rollup@function@namespace-tostring@inlined-namespace: adds Symbol.toStringTag property to inlined namespaces",
  "rollup@function@namespace-tostring@interop-property-descriptor: generated interop namespaces should have correct Symbol.toStringTag",
  "rollup@function@namespace-tostring@property-descriptor: namespace export should have @@toStringTag with correct property descriptors #4336",
  "rollup@function@namespace-update-import-fails: disallows updates to namespace exports",
  "rollup@function@namespacing-collisions-2: correctly namespaces when using * exports, take two (#910)",
  "rollup@function@namespacing-collisions: correctly namespaces when using * exports (#910)",
  "rollup@function@namespacing-in-sub-functions: correctly namespaces sub-functions (#910)",
  "rollup@function@nested-and-async-plugin: works when nested plugin",
  "rollup@function@nested-inlined-dynamic-import-1: deconflicts variables when nested dynamic imports are inlined via inlineDynamicImports",
  "rollup@function@nested-inlined-dynamic-import-2: deconflicts variables when nested dynamic imports are inlined",
  "rollup@function@nested-namespace-member-expression: handles accessing members of namespaces correctly",
  "rollup@function@newline-after-comment: inserts newline after comment",
  "rollup@function@no-external-live-bindings-compact: Allows omitting the code that handles external live bindings",
  "rollup@function@no-external-live-bindings: Allows omitting the code that handles external live bindings",
  "rollup@function@no-relative-external: missing relative imports are an error, not a warning",
  "rollup@function@non-extension-dot: adds .js to module paths with non-extension dots in them",
  "rollup@function@non-function-hook-async: throws when providing a value for an async function hook",
  "rollup@function@non-function-hook-sync: throws when providing a value for a sync function hook",
  "rollup@function@options-async-hook: resolves promises between sequential options hooks",
  "rollup@function@options-hook: allows to read and modify options in the options hook",
  "rollup@function@options-in-renderstart: makes input and output options available in renderStart",
  "rollup@function@output-options-hook: allows to read and modify options in the options hook",
  "rollup@function@parameter-defaults@module-side-effects: does not tree-shake necessary parameter defaults when modulesSideEffects are disabled",
  "rollup@function@paths-are-case-sensitive: insists on correct casing for imports",
  "rollup@function@per-output-plugins-warn-hooks: warns when input hooks are used in output plugins",
  "rollup@function@perf-adds-plugin-context-to-plugins: Adds plugin context to plugins with perf=true",
  "rollup@function@plugin-cache@anonymous-delete: throws for anonymous plugins deleting from the cache",
  "rollup@function@plugin-cache@anonymous-get: throws for anonymous plugins reading the cache",
  "rollup@function@plugin-cache@anonymous-has: throws for anonymous plugins checking the cache",
  "rollup@function@plugin-cache@anonymous-set: throws for anonymous plugins adding to the cache",
  "rollup@function@plugin-cache@duplicate-names: throws if two plugins with the same name and no cache key access the cache",
  "rollup@function@plugin-error-loc-instead-pos: `this.error(...)` accepts { line, column } object as second parameter (#1265)",
  "rollup@function@plugin-error-module-parsed: errors in moduleParsed abort the build",
  "rollup@function@plugin-error-only-first-render-chunk: throws error only with first plugin renderChunk",
  "rollup@function@plugin-error-only-first-transform: throws error only with first plugin transform",
  "rollup@function@plugin-error-should-transform: errors in shouldTransformCachedModule abort the build",
  "rollup@function@plugin-error@buildEnd: buildStart hooks can use this.error",
  "rollup@function@plugin-error@buildStart: buildStart hooks can use this.error",
  "rollup@function@plugin-error@generateBundle: buildStart hooks can use this.error",
  "rollup@function@plugin-error@load: buildStart hooks can use this.error",
  "rollup@function@plugin-error@renderChunk: buildStart hooks can use this.error",
  "rollup@function@plugin-error@renderStart: buildStart hooks can use this.error",
  "rollup@function@plugin-error@resolveId: buildStart hooks can use this.error",
  "rollup@function@plugin-error@transform: plugin transform hooks can use `this.error({...}, char)` (#1140)",
  "rollup@function@plugin-module-information: provides module information on the plugin context",
  "rollup@function@plugin-parse-ast-receives-comments: plugin parse ast receives comments",
  "rollup@function@plugin-parse-ast-remove-sourcemapping: remove source mapping comment even if code is parsed by PluginContext.parse method",
  "rollup@function@plugin-parse: plugin transform hooks can use `this.parse(code, options)`",
  "rollup@function@plugin-warn-loc-instead-pos: `this.warn(...)` accepts { line, column } object as second parameter (#1265)",
  "rollup@function@plugin-warn: plugin transform hooks can use `this.warn({...}, char)` (#1140)",
  "rollup@function@plugins-can-manipulate-options: plugins can manipulate the options object",
  "rollup@function@preload-cyclic-module: handles pre-loading a cyclic module in the resolveId hook",
  "rollup@function@preserve-modules-circular-order: preserves execution order for circular dependencies when preserving modules",
  "rollup@function@preserve-modules-default-mode-namespace: import namespace from chunks with default export mode when preserving modules",
  "rollup@function@preserve-modules@inline-dynamic-imports: Inlining dynamic imports is not supported when preserving modules",
  "rollup@function@preserve-modules@invalid-default-export-mode: throws when using default export mode with named exports",
  "rollup@function@preserve-modules@invalid-no-preserve-entry-signatures: throws when setting preserveEntrySignatures to false",
  "rollup@function@preserve-modules@invalid-none-export-mode: throws when using none export mode with named exports",
  "rollup@function@preserve-modules@manual-chunks: Assigning manual chunks fails when preserving modules",
  "rollup@function@preserve-modules@mixed-exports: warns for mixed exports in all chunks when preserving modules",
  "rollup@function@preserve-modules@virtual-modules-conflict: Generates actual files for virtual modules when preserving modules",
  "rollup@function@preserve-modules@virtual-modules: Generates actual files for virtual modules when preserving modules",
  "rollup@function@prevent-asi-with-line-comments: prevent semicolon insertion for return statements when there are line comments",
  "rollup@function@prevent-context-resolve-loop: prevents infinite loops when several plugins are calling this.resolve in resolveId",
  "rollup@function@prevent-tree-shaking-asi: prevent automatic semicolon insertion from changing behaviour when tree-shaking",
  "rollup@function@propertyReadSideEffects-always: verify property accesses are retained for getters with side effects",
  "rollup@function@reassign-import-fails: disallows assignments to imported bindings",
  "rollup@function@reassign-import-not-at-top-level-fails: disallows assignments to imported bindings not at the top level",
  "rollup@function@recursive-reexports: handles recursive namespace reexports",
  "rollup@function@reexport-from-synthetic: handles reexporting a synthetic namespace from a non-synthetic module",
  "rollup@function@reexport-missing-error: reexporting a missing identifier should print an error",
  "rollup@function@reexport-ns: external namespace reexport",
  "rollup@function@relative-external-include-once-nested: includes a relative external module only once (nested version)",
  "rollup@function@relative-external-include-once-two-external: includes a relative external module only once (two external deps)",
  "rollup@function@relative-external-include-once-up: includes a relative external module only once (from upper directory too)",
  "rollup@function@relative-external-include-once: includes a relative external module only once",
  "rollup@function@render-chunk-async: bundle transformers can be asynchronous",
  "rollup@function@resolve-id-object: allows resolving an id with an object",
  "rollup@function@resolve-unordered-assignments-2: Assignments should be correctly bound independent of their order",
  "rollup@function@resolve-unordered-assignments: Assignments should be correctly bound independent of their order",
  "rollup@function@resolves-namespace-default: namespace's 'default' properties should be available",
  "rollup@function@respect-default-export-reexporter-side-effects: respect side-effects in reexporting modules even if moduleSideEffects are off",
  "rollup@function@respect-reexporter-side-effects: respect side-effects in reexporting modules even if moduleSideEffects are off",
  "rollup@function@respect-synthetic-export-reexporter-side-effects: respect side-effects in reexporting modules even if moduleSideEffects are off",
  "rollup@function@retains-sort-order-b: sorts statements according to their original order within modules, part 2",
  "rollup@function@retains-sort-order: sorts statements according to their original order within modules",
  "rollup@function@shims-missing-exports: shims missing exports",
  "rollup@function@sourcemap-base-url-invalid: throws for invalid sourcemapBaseUrl",
  "rollup@function@statement-order: correct statement order is preserved even in weird edge cases",
  "rollup@function@symlink: follows symlinks",
  "rollup@function@synthetic-named-export-entry: does not expose synthetic named exports on entry points",
  "rollup@function@synthetic-named-exports-fallback-es2015: adds a fallback in case synthetic named exports are falsy",
  "rollup@function@synthetic-named-exports-fallback: adds a fallback in case synthetic named exports are falsy",
  "rollup@function@synthetic-named-exports@circular-synthetic-exports2: handles circular synthetic exports",
  "rollup@function@synthetic-named-exports@circular-synthetic-exports: handles circular synthetic exports",
  "rollup@function@synthetic-named-exports@dynamic-import: supports dynamically importing a module with synthetic named exports",
  "rollup@function@synthetic-named-exports@entry: does not expose the synthetic namespace if an entry point uses a string value",
  "rollup@function@synthetic-named-exports@external-synthetic-exports: external modules can not have syntheticNamedExports",
  "rollup@function@synthetic-named-exports@namespace-object: does not include named synthetic namespaces in namespace objects",
  "rollup@function@synthetic-named-exports@namespace-overrides: supports re-exported synthetic exports in namespace objects with correct export precedence",
  "rollup@function@synthetic-named-exports@non-default-export: supports providing a named export to generate synthetic exports",
  "rollup@function@synthetic-named-exports@synthetic-exports-need-default: synthetic named exports modules need a default export",
  "rollup@function@synthetic-named-exports@synthetic-exports-need-fallback-export: synthetic named exports modules need their fallback export",
  "rollup@function@synthetic-named-exports@synthetic-named-export-as-default: makes sure default exports of synthetic named exports are snapshots",
  "rollup@function@throws-not-found-module: throws error if module is not found",
  "rollup@function@transform-without-code-warn-ast: warns when returning a map but no code from a transform hook",
  "rollup@function@transform-without-code-warn-map: warns when returning a map but no code from a transform hook",
  "rollup@function@tree-shake-variable-declarations: remove unused variables from declarations (#1937)",
  "rollup@function@unknown-generated-code-preset: throws for unknown presets for the generatedCode option",
  "rollup@function@unknown-generated-code-value: throws for unknown string values for the generatedCode option",
  "rollup@function@unknown-treeshake-preset: throws for unknown presets for the treeshake option",
  "rollup@function@unknown-treeshake-value: throws for unknown string values for the treeshake option",
  "rollup@function@unused-import: warns on unused imports ([#595])",
  "rollup@function@update-expression-of-import-fails: disallows updates to imported bindings",
  "rollup@function@uses-supplied-ast: uses supplied AST",
  "rollup@function@validate-output: handles validate failure",
  "rollup@function@vars-with-init-in-dead-branch: handles vars with init in dead branch (#1198)",
  "rollup@function@warn-missing-iife-name: warns if no name is provided for an IIFE bundle",
  "rollup@function@warn-on-auto-named-default-exports: warns if default and named exports are used in auto mode",
  "rollup@function@warn-on-empty-bundle: warns if empty bundle is generated  (#444)",
  "rollup@function@warn-on-eval: warns about use of eval",
  "rollup@function@warn-on-namespace-conflict: warns on duplicate export * from",
  "rollup@function@warn-on-top-level-this: warns on top-level this (#770)",
  "rollup@function@warn-on-unused-missing-imports: warns on missing (but unused) imports",
  "rollup@function@warning-low-resolution-location: handles when a low resolution sourcemap is used to report an error",
  "rollup@function@warnings-to-string: provides a string conversion for warnings",
  "rollup@function@warns-for-invalid-options: warns for invalid options"
]
