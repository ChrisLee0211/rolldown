name: NPM packages build & test & release
env:
  DEBUG: napi:*
  APP_NAME: rolldown
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  RUST_TOOLCHAIN: nightly-2023-02-21
  CARGO_INCREMENTAL: 0
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build:ci:release
              strip -x crates/rolldown_node_binding/*.node
          - host: windows-latest
            build: yarn build:ci:release
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              export CARGO_BUILD_TARGET=i686-pc-windows-msvc
              yarn build:ci:release
              yarn workspace @rolldown/core build
              yarn test
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu &&
              yarn build:ci:release &&
              strip crates/rolldown_node_binding/*.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: set -e && yarn build:ci:release && strip crates/rolldown_node_binding/*.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              export CARGO_BUILD_TARGET=aarch64-apple-darwin
              yarn build:ci:release
              strip -x crates/rolldown_node_binding/*.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              export CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu &&
              rustup target add aarch64-unknown-linux-gnu &&
              yarn build:ci:release &&
              aarch64-unknown-linux-gnu-strip crates/rolldown_node_binding/*.node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              export CARGO_BUILD_TARGET=armv7-unknown-linux-gnueabihf
              yarn build:ci:release
              arm-linux-gnueabihf-strip crates/rolldown_node_binding/*.node
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              export CARGO_BUILD_TARGET=aarch64-linux-android
              yarn build:ci:release
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip crates/rolldown_node_binding/*.node
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: |
              export CARGO_BUILD_TARGET=armv7-linux-androideabi
              yarn build:ci:release
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip crates/rolldown_node_binding/*.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              export CARGO_BUILD_TARGET=aarch64-unknown-linux-musl &&
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc &&
              yarn build:ci:release &&
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip crates/rolldown_node_binding/*.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              export CARGO_BUILD_TARGET=aarch64-pc-windows-msvc
              yarn build:ci:release
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache/registry/index/
            .cargo-cache/registry/cache/
            .cargo-cache/git/db/
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install --mode=skip-build
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: crates/rolldown_node_binding/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
      - name: Upload cjs entry
        uses: actions/upload-artifact@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          name: bindings-rolldown-core-cjs
          path: packages/core/dist/index.js
          if-no-files-found: error
      - name: Upload cjs entry
        uses: actions/upload-artifact@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          name: bindings-rolldown-core-mjs
          path: packages/core/lib/index.mjs
          if-no-files-found: error
  build-freebsd:
    runs-on: macos-12
    name: Build FreeBSD
    steps:
      - uses: actions/checkout@v3
      - name: Build
        id: build
        uses: vmactions/freebsd-vm@v0
        env:
          DEBUG: napi:*
          RUSTUP_HOME: /usr/local/rustup
          CARGO_HOME: /usr/local/cargo
          RUSTUP_IO_THREADS: 1
        with:
          envs: DEBUG RUSTUP_HOME CARGO_HOME RUSTUP_IO_THREADS
          usesh: true
          mem: 3000
          prepare: |
            pkg install -y -f curl node libnghttp2
            curl -qL https://www.npmjs.com/install.sh | sh
            npm install --location=global --ignore-scripts yarn
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain beta
            export PATH="/usr/local/cargo/bin:$PATH"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ yarn --version ~~~~"
            yarn --version
          run: |
            export PATH="/usr/local/cargo/bin:$PATH"
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            yarn install --mode=skip-build
            yarn build:ci:release
            strip -x crates/rolldown_node_binding/*.node
            yarn test
            rm -rf node_modules
            rm -rf target
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-freebsd
          path: crates/rolldown_node_binding/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '14'
          - '16'
          - '18'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: crates/rolldown_node_binding
      - name: Download cjs entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-cjs
          path: packages/core/dist/index.js
      - name: Download esm entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-mjs
          path: packages/core/lib/index.mjs
      - name: List packages
        run: ls -R crates
        shell: bash
      - name: Install dependencies
        run: yarn install --mode=skip-build
      - name: Test bindings
        run: yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '14'
          - '16'
          - '18'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: crates/rolldown_node_binding
      - name: Download cjs entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-cjs
          path: packages/core/dist/index.js
      - name: Download esm entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-mjs
          path: packages/core/lib/index.mjs
      - name: List packages
        run: ls -R crates
        shell: bash
      - name: Install dependencies
        run: yarn install --mode=skip-build
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '14'
          - '16'
          - '18'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: crates/rolldown_node_binding
      - name: Download cjs entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-cjs
          path: packages/core/dist/index.js
      - name: Download esm entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-mjs
          path: packages/core/lib/index.mjs
      - name: List packages
        run: ls -R crates
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn install --mode=skip-build
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine yarn test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '14'
          - '16'
          # TODO, Fix aarch64-unknown-linux-gnu Node@18 test
          # - '18'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: crates/rolldown_node_binding
      - name: Download cjs entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-cjs
          path: packages/core/dist/index.js
      - name: Download esm entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-mjs
          path: packages/core/lib/index.mjs
      - name: List packages
        run: ls -R crates
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install --mode=skip-build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            yarn test
            ls -la
  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: crates/rolldown_node_binding
      - name: Download cjs entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-cjs
          path: packages/core/dist/index.js
      - name: Download esm entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-mjs
          path: packages/core/lib/index.mjs
      - name: List packages
        run: ls -R crates
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "musl"
          yarn install --mode=skip-build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            apk add nodejs npm yarn
            yarn test
  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '14'
          - '16'
          - '18'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: crates/rolldown_node_binding
      - name: Download cjs entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-cjs
          path: packages/core/dist/index.js
      - name: Download esm entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-mjs
          path: packages/core/lib/index.mjs
      - name: List packages
        run: ls -R crates
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm"
          yarn install --mode=skip-build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-bullseye-slim
          options: '--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            yarn test
            ls -la
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build-freebsd
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
      - name: Install dependencies
        run: yarn install --mode=skip-build
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: crates/rolldown_node_binding/artifacts
      - name: Download cjs entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-cjs
          path: packages/core/dist/index.js
      - name: Download esm entry
        uses: actions/download-artifact@v3
        with:
          name: bindings-rolldown-core-mjs
          path: packages/core/lib/index.mjs
      - name: Move artifacts
        run: yarn workspace @rolldown/node-binding artifacts
      - name: List packages
        run: ls -R ./crates/rolldown_node_binding
        shell: bash
      - name: Publish
        if: "startsWith(github.event.head_commit.message, 'chore(release): publish')"
        run: |
          find ./packages/ -type d -maxdepth 1 -exec cp LICENSE {} \;
          find ./packages/ -type d -maxdepth 1 -exec cp THIRD-PARTY-LICENSE {} \;
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          yarn lerna publish from-package --no-verify-access --yes
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
