/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface ExternalOption {
  function?: (specifier: string, importer: string | undefined, isResolved: boolean) => boolean
  string: Array<string>
}
export interface ResolveIdResult {
  id: string
  external: boolean
}
export interface BuildPluginOption {
  name: string
  transform?: (id: string, code: string) => Promise<string | null | undefined>
  resolveId?: (specifier: string, importer?: string) => Promise<string | null | ResolveIdResult>
}
export interface NodeResolveOptions {
  extensions: Array<string>
}
export interface TsConfigOptions {
  useDefineForClassFields: boolean
}
export interface BuiltinsOptions {
  /** None means disable the behaviors */
  nodeResolve?: NodeResolveOptions
  tsconfig?: TsConfigOptions
}
export interface InputOptions {
  external: ExternalOption
  input: Record<string, string>
  plugins: Array<BuildPluginOption>
  preserveSymlinks: boolean
  shimMissingExports: boolean
  treeshake?: boolean
  cwd: string
  builtins: BuiltinsOptions
}
export interface OutputOptions {
  entryFileNames?: string
  chunkFileNames?: string
  dir?: string
  exports?: 'default' | 'named' | 'none' | 'auto'
  format?: 'esm' | 'cjs'
}
export interface OutputChunk {
  code: string
  fileName: string
}
export class Bundler {
  constructor(inputOpts: InputOptions)
  write(opts: OutputOptions): Promise<Array<OutputChunk>>
  generate(opts: OutputOptions): Promise<Array<OutputChunk>>
}
